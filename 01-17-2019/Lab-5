// Starting a nginx web-server

$ docker container run --publish 80:80 nginx
Unable to find image 'nginx:latest' locally
latest: Pulling from library/nginx
177e7ef0df69: Pull complete 
ea57c53235df: Pull complete 
bbdb1fbd4a86: Pull complete 
Digest: sha256:b543f6d0983fbc25b9874e22f4fe257a567111da96fd1d8f1b44315f1236398c

Status: Downloaded newer image for nginx:latest				=> Stuck at here then we hit in browser “localhost:80/” => refresh it for logs
 
172.17.0.1 - - [17/Jan/2019:05:17:23 +0000] "GET / HTTP/1.1" 304 0 "-" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/11.1 Safari/605.1.15" "-"
172.17.0.1 - - [17/Jan/2019:05:18:00 +0000] "GET / HTTP/1.1" 200 612 "-" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/11.1 Safari/605.1.15" "-"
172.17.0.1 - - [17/Jan/2019:05:18:04 +0000] "GET / HTTP/1.1" 200 612 "-" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/11.1 Safari/605.1.15" "-"
172.17.0.1 - - [17/Jan/2019:05:18:32 +0000] "GET / HTTP/1.1" 200 612 "-" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/11.1 Safari/605.1.15" "-"
172.17.0.1 - - [17/Jan/2019:05:18:35 +0000] "GET / HTTP/1.1" 200 612 "-" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/11.1 Safari/605.1.15" "-"
172.17.0.1 - - [17/Jan/2019:05:18:35 +0000] "GET / HTTP/1.1" 200 612 "-" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/11.1 Safari/605.1.15" "-"
172.17.0.1 - - [17/Jan/2019:05:18:36 +0000] "GET / HTTP/1.1" 200 612 "-" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/11.1 Safari/605.1.15" "-"
172.17.0.1 - - [17/Jan/2019:05:18:36 +0000] "GET / HTTP/1.1" 200 612 "-" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/11.1 Safari/605.1.15" "-

// Background Process:

Downloaded the image called “nginx” from docker hub
Started a new container from docker image
Open port 80 on the host IP
Route that traffic to the container IP, port 80

// Executes on detach mode but still you can see outputs in browser:
$ docker container run --publish 80:80 --detach nginx
4fb9033f1f70b7e8e835fb1f112c0c3ec6ed9f7c1c25954252c3016971220143

# List all the running containers only:
$ docker container ls

# List all the hidden containers:
$ docker container ls -a
$ docker ps -a

# Stop the running container:
$ docker container stop <container-id>


# Issues:

$ sudo docker container run --publish 8080:80 --detach java
Password:
f27a8c4df676a88658a37a2b84012f0d03a2ccac0e18b8b732347ede04a6253e
docker: Error response from daemon: driver failed programming external connectivity on endpoint modest_mccarthy (46935a0f727c657f1a267aec38c8c8a5af6127207c9ab445c30869466d3bd6ed): Bind for 0.0.0.0:8080 failed: port is already allocated.

sudo docker container run --publish 80:80 --detach java
0f13c6d222d53db7ad267d1ae6043e2f645e794edf2adedd0fdc975363dcb408
docker: Error response from daemon: driver failed programming external connectivity on endpoint distracted_lamarr (a701d0332473366b95a3cf3792bf249dd24c0096dceedd670f9566c33bd5906a): Bind for 0.0.0.0:80 failed: port is already allocated.

sudo docker container run --publish 90:80 --detach java
e6fd29011ead828731d57355e71b909302cc2df962e392956d273485ffaf7675


# Container logs
$ docker container logs <container-id>

# List the process id’s where container running
$ docker container top <container-id>


# What happens when we execute “docker container run”
Looks that image locally in image cache, if doesn’t find that specific image
Then looks to the remote image repository (default is docker hub)
Download the latest version (nginx: latest by default)
Create a new container based on the image and prepares to start
Gives a virtual ip on a private network inside the docker engine
Opens up a port 80 on host and forwards to port 80 in container (80:80)
Start container by using the CMD in the image Dockerfile
